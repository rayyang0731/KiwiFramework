//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg
{ 

public sealed partial class TbCollect :  Bright.Config.BeanBase 
{
    public TbCollect(JSONNode _json) 
    {
        { if(!_json["ID"].IsNumber) { throw new SerializationException(); }  ID = _json["ID"]; }
        { if(!_json["Name"].IsString) { throw new SerializationException(); }  Name = _json["Name"]; }
        { if(!_json["IconPath"].IsString) { throw new SerializationException(); }  IconPath = _json["IconPath"]; }
        { if(!_json["TypeName"].IsString) { throw new SerializationException(); }  TypeName = _json["TypeName"]; }
        { if(!_json["TypeBgName"].IsString) { throw new SerializationException(); }  TypeBgName = _json["TypeBgName"]; }
        { if(!_json["Type"].IsNumber) { throw new SerializationException(); }  Type = _json["Type"]; }
        { if(!_json["Order"].IsNumber) { throw new SerializationException(); }  Order = _json["Order"]; }
        { if(!_json["EffectType"].IsNumber) { throw new SerializationException(); }  EffectType = (Collection.EffectType)_json["EffectType"].AsInt; }
        { var __json0 = _json["EffectValue"]; if(!__json0.IsArray) { throw new SerializationException(); } int _n0 = __json0.Count; EffectValue = new CollectEffectData[_n0]; int __index0=0; foreach(JSONNode __e0 in __json0.Children) { CollectEffectData __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = CollectEffectData.DeserializeCollectEffectData(__e0);  }  EffectValue[__index0++] = __v0; }   }
        { if(!_json["IsPercent"].IsBoolean) { throw new SerializationException(); }  IsPercent = _json["IsPercent"]; }
        { if(!_json["PVEorPVP"].IsNumber) { throw new SerializationException(); }  PVEorPVP = _json["PVEorPVP"]; }
        { if(!_json["Desc"].IsString) { throw new SerializationException(); }  Desc = _json["Desc"]; }
        { if(!_json["Story"].IsString) { throw new SerializationException(); }  Story = _json["Story"]; }
        { if(!_json["Condition"].IsNumber) { throw new SerializationException(); }  Condition = _json["Condition"]; }
        { if(!_json["Diomand"].IsNumber) { throw new SerializationException(); }  Diomand = _json["Diomand"]; }
        { if(!_json["ModelPath"].IsString) { throw new SerializationException(); }  ModelPath = _json["ModelPath"]; }
        { var _json2 = _json["ModelPos"]; if(!_json2.IsObject) { throw new SerializationException(); } float __x; { if(!_json2["x"].IsNumber) { throw new SerializationException(); }  __x = _json2["x"]; } float __y; { if(!_json2["y"].IsNumber) { throw new SerializationException(); }  __y = _json2["y"]; } float __z; { if(!_json2["z"].IsNumber) { throw new SerializationException(); }  __z = _json2["z"]; }  ModelPos = new UnityEngine.Vector3(__x, __y,__z); }
        PostInit();
    }

    public TbCollect(int ID, string Name, string IconPath, string TypeName, string TypeBgName, int Type, int Order, Collection.EffectType EffectType, CollectEffectData[] EffectValue, bool IsPercent, int PVEorPVP, string Desc, string Story, int Condition, int Diomand, string ModelPath, UnityEngine.Vector3 ModelPos ) 
    {
        this.ID = ID;
        this.Name = Name;
        this.IconPath = IconPath;
        this.TypeName = TypeName;
        this.TypeBgName = TypeBgName;
        this.Type = Type;
        this.Order = Order;
        this.EffectType = EffectType;
        this.EffectValue = EffectValue;
        this.IsPercent = IsPercent;
        this.PVEorPVP = PVEorPVP;
        this.Desc = Desc;
        this.Story = Story;
        this.Condition = Condition;
        this.Diomand = Diomand;
        this.ModelPath = ModelPath;
        this.ModelPos = ModelPos;
        PostInit();
    }

    public static TbCollect DeserializeTbCollect(JSONNode _json)
    {
        return new TbCollect(_json);
    }

    /// <summary>
    /// ID
    /// </summary>
    public int ID { get; private set; }
    /// <summary>
    /// 收集品名称
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 图标地址
    /// </summary>
    public string IconPath { get; private set; }
    /// <summary>
    /// 类型背景图名称
    /// </summary>
    public string TypeName { get; private set; }
    /// <summary>
    /// 类型名称
    /// </summary>
    public string TypeBgName { get; private set; }
    /// <summary>
    /// 类型
    /// </summary>
    public int Type { get; private set; }
    /// <summary>
    /// 排序
    /// </summary>
    public int Order { get; private set; }
    /// <summary>
    /// 效果类型
    /// </summary>
    public Collection.EffectType EffectType { get; private set; }
    /// <summary>
    /// 效果数值
    /// </summary>
    public CollectEffectData[] EffectValue { get; private set; }
    /// <summary>
    /// 是否为系数
    /// </summary>
    public bool IsPercent { get; private set; }
    /// <summary>
    /// 生效位置
    /// </summary>
    public int PVEorPVP { get; private set; }
    /// <summary>
    /// 作用描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 背景描述
    /// </summary>
    public string Story { get; private set; }
    /// <summary>
    /// 激活条件
    /// </summary>
    public int Condition { get; private set; }
    /// <summary>
    /// 售价
    /// </summary>
    public int Diomand { get; private set; }
    /// <summary>
    /// 模型地址
    /// </summary>
    public string ModelPath { get; private set; }
    /// <summary>
    /// 模型位置
    /// </summary>
    public UnityEngine.Vector3 ModelPos { get; private set; }

    public const int __ID__ = 108499644;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in EffectValue) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in EffectValue) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "Name:" + Name + ","
        + "IconPath:" + IconPath + ","
        + "TypeName:" + TypeName + ","
        + "TypeBgName:" + TypeBgName + ","
        + "Type:" + Type + ","
        + "Order:" + Order + ","
        + "EffectType:" + EffectType + ","
        + "EffectValue:" + Bright.Common.StringUtil.CollectionToString(EffectValue) + ","
        + "IsPercent:" + IsPercent + ","
        + "PVEorPVP:" + PVEorPVP + ","
        + "Desc:" + Desc + ","
        + "Story:" + Story + ","
        + "Condition:" + Condition + ","
        + "Diomand:" + Diomand + ","
        + "ModelPath:" + ModelPath + ","
        + "ModelPos:" + ModelPos + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
