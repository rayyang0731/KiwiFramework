//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using SimpleJSON;


namespace cfg
{ 
   
public sealed partial class Tables
{
    public I18N I18N {get; }
    public InterfaceText InterfaceText {get; }
    public Achievement Achievement {get; }
    public Actor Actor {get; }
    public Attribute Attribute {get; }
    public Block Block {get; }
    public BlockAnimation BlockAnimation {get; }
    public BlockBuff BlockBuff {get; }
    public BlockGuide BlockGuide {get; }
    public BlockOperationStep BlockOperationStep {get; }
    public BlockStyle BlockStyle {get; }
    public Box Box {get; }
    public BoxSlot BoxSlot {get; }
    public Collect Collect {get; }
    public DiamondShop DiamondShop {get; }
    public Drop Drop {get; }
    public Dungeon Dungeon {get; }
    public FunctionalOpening FunctionalOpening {get; }
    public GameColor GameColor {get; }
    public Grade Grade {get; }
    public GradeConditionDesc GradeConditionDesc {get; }
    public Guide Guide {get; }
    public Icon Icon {get; }
    public Level Level {get; }
    public LevelMap LevelMap {get; }
    public MatchGroup MatchGroup {get; }
    public Pokedex Pokedex {get; }
    public PowerShop PowerShop {get; }
    public Prop Prop {get; }
    public PVPLevel PVPLevel {get; }
    public PVPRanking PVPRanking {get; }
    public PVPRankPrize PVPRankPrize {get; }
    public RandomName RandomName {get; }
    public ReviveShop ReviveShop {get; }
    public RoundGroup RoundGroup {get; }
    public SceneRes SceneRes {get; }
    public Shop Shop {get; }
    public Skill Skill {get; }
    public SkillExp SkillExp {get; }
    public StarLevelReward StarLevelReward {get; }

    public Tables(System.Func<string, JSONNode> loader)
    {
        var tables = new System.Collections.Generic.Dictionary<string, object>();
        I18N = new I18N(loader("i18n")); 
        tables.Add("I18N", I18N);
        InterfaceText = new InterfaceText(loader("interfacetext")); 
        tables.Add("InterfaceText", InterfaceText);
        Achievement = new Achievement(loader("achievement")); 
        tables.Add("Achievement", Achievement);
        Actor = new Actor(loader("actor")); 
        tables.Add("Actor", Actor);
        Attribute = new Attribute(loader("attribute")); 
        tables.Add("Attribute", Attribute);
        Block = new Block(loader("block")); 
        tables.Add("Block", Block);
        BlockAnimation = new BlockAnimation(loader("blockanimation")); 
        tables.Add("BlockAnimation", BlockAnimation);
        BlockBuff = new BlockBuff(loader("blockbuff")); 
        tables.Add("BlockBuff", BlockBuff);
        BlockGuide = new BlockGuide(loader("blockguide")); 
        tables.Add("BlockGuide", BlockGuide);
        BlockOperationStep = new BlockOperationStep(loader("blockoperationstep")); 
        tables.Add("BlockOperationStep", BlockOperationStep);
        BlockStyle = new BlockStyle(loader("blockstyle")); 
        tables.Add("BlockStyle", BlockStyle);
        Box = new Box(loader("box")); 
        tables.Add("Box", Box);
        BoxSlot = new BoxSlot(loader("boxslot")); 
        tables.Add("BoxSlot", BoxSlot);
        Collect = new Collect(loader("collect")); 
        tables.Add("Collect", Collect);
        DiamondShop = new DiamondShop(loader("diamondshop")); 
        tables.Add("DiamondShop", DiamondShop);
        Drop = new Drop(loader("drop")); 
        tables.Add("Drop", Drop);
        Dungeon = new Dungeon(loader("dungeon")); 
        tables.Add("Dungeon", Dungeon);
        FunctionalOpening = new FunctionalOpening(loader("functionalopening")); 
        tables.Add("FunctionalOpening", FunctionalOpening);
        GameColor = new GameColor(loader("gamecolor")); 
        tables.Add("GameColor", GameColor);
        Grade = new Grade(loader("grade")); 
        tables.Add("Grade", Grade);
        GradeConditionDesc = new GradeConditionDesc(loader("gradeconditiondesc")); 
        tables.Add("GradeConditionDesc", GradeConditionDesc);
        Guide = new Guide(loader("guide")); 
        tables.Add("Guide", Guide);
        Icon = new Icon(loader("icon")); 
        tables.Add("Icon", Icon);
        Level = new Level(loader("level")); 
        tables.Add("Level", Level);
        LevelMap = new LevelMap(loader("levelmap")); 
        tables.Add("LevelMap", LevelMap);
        MatchGroup = new MatchGroup(loader("matchgroup")); 
        tables.Add("MatchGroup", MatchGroup);
        Pokedex = new Pokedex(loader("pokedex")); 
        tables.Add("Pokedex", Pokedex);
        PowerShop = new PowerShop(loader("powershop")); 
        tables.Add("PowerShop", PowerShop);
        Prop = new Prop(loader("prop")); 
        tables.Add("Prop", Prop);
        PVPLevel = new PVPLevel(loader("pvplevel")); 
        tables.Add("PVPLevel", PVPLevel);
        PVPRanking = new PVPRanking(loader("pvpranking")); 
        tables.Add("PVPRanking", PVPRanking);
        PVPRankPrize = new PVPRankPrize(loader("pvprankprize")); 
        tables.Add("PVPRankPrize", PVPRankPrize);
        RandomName = new RandomName(loader("randomname")); 
        tables.Add("RandomName", RandomName);
        ReviveShop = new ReviveShop(loader("reviveshop")); 
        tables.Add("ReviveShop", ReviveShop);
        RoundGroup = new RoundGroup(loader("roundgroup")); 
        tables.Add("RoundGroup", RoundGroup);
        SceneRes = new SceneRes(loader("sceneres")); 
        tables.Add("SceneRes", SceneRes);
        Shop = new Shop(loader("shop")); 
        tables.Add("Shop", Shop);
        Skill = new Skill(loader("skill")); 
        tables.Add("Skill", Skill);
        SkillExp = new SkillExp(loader("skillexp")); 
        tables.Add("SkillExp", SkillExp);
        StarLevelReward = new StarLevelReward(loader("starlevelreward")); 
        tables.Add("StarLevelReward", StarLevelReward);
        PostInit();

        I18N.Resolve(tables); 
        InterfaceText.Resolve(tables); 
        Achievement.Resolve(tables); 
        Actor.Resolve(tables); 
        Attribute.Resolve(tables); 
        Block.Resolve(tables); 
        BlockAnimation.Resolve(tables); 
        BlockBuff.Resolve(tables); 
        BlockGuide.Resolve(tables); 
        BlockOperationStep.Resolve(tables); 
        BlockStyle.Resolve(tables); 
        Box.Resolve(tables); 
        BoxSlot.Resolve(tables); 
        Collect.Resolve(tables); 
        DiamondShop.Resolve(tables); 
        Drop.Resolve(tables); 
        Dungeon.Resolve(tables); 
        FunctionalOpening.Resolve(tables); 
        GameColor.Resolve(tables); 
        Grade.Resolve(tables); 
        GradeConditionDesc.Resolve(tables); 
        Guide.Resolve(tables); 
        Icon.Resolve(tables); 
        Level.Resolve(tables); 
        LevelMap.Resolve(tables); 
        MatchGroup.Resolve(tables); 
        Pokedex.Resolve(tables); 
        PowerShop.Resolve(tables); 
        Prop.Resolve(tables); 
        PVPLevel.Resolve(tables); 
        PVPRanking.Resolve(tables); 
        PVPRankPrize.Resolve(tables); 
        RandomName.Resolve(tables); 
        ReviveShop.Resolve(tables); 
        RoundGroup.Resolve(tables); 
        SceneRes.Resolve(tables); 
        Shop.Resolve(tables); 
        Skill.Resolve(tables); 
        SkillExp.Resolve(tables); 
        StarLevelReward.Resolve(tables); 
        PostResolve();
    }

    public void TranslateText(System.Func<string, string, string> translator)
    {
        I18N.TranslateText(translator); 
        InterfaceText.TranslateText(translator); 
        Achievement.TranslateText(translator); 
        Actor.TranslateText(translator); 
        Attribute.TranslateText(translator); 
        Block.TranslateText(translator); 
        BlockAnimation.TranslateText(translator); 
        BlockBuff.TranslateText(translator); 
        BlockGuide.TranslateText(translator); 
        BlockOperationStep.TranslateText(translator); 
        BlockStyle.TranslateText(translator); 
        Box.TranslateText(translator); 
        BoxSlot.TranslateText(translator); 
        Collect.TranslateText(translator); 
        DiamondShop.TranslateText(translator); 
        Drop.TranslateText(translator); 
        Dungeon.TranslateText(translator); 
        FunctionalOpening.TranslateText(translator); 
        GameColor.TranslateText(translator); 
        Grade.TranslateText(translator); 
        GradeConditionDesc.TranslateText(translator); 
        Guide.TranslateText(translator); 
        Icon.TranslateText(translator); 
        Level.TranslateText(translator); 
        LevelMap.TranslateText(translator); 
        MatchGroup.TranslateText(translator); 
        Pokedex.TranslateText(translator); 
        PowerShop.TranslateText(translator); 
        Prop.TranslateText(translator); 
        PVPLevel.TranslateText(translator); 
        PVPRanking.TranslateText(translator); 
        PVPRankPrize.TranslateText(translator); 
        RandomName.TranslateText(translator); 
        ReviveShop.TranslateText(translator); 
        RoundGroup.TranslateText(translator); 
        SceneRes.TranslateText(translator); 
        Shop.TranslateText(translator); 
        Skill.TranslateText(translator); 
        SkillExp.TranslateText(translator); 
        StarLevelReward.TranslateText(translator); 
    }
    
    partial void PostInit();
    partial void PostResolve();
}

}