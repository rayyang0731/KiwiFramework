//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg
{ 

public sealed partial class TbAchievement :  Bright.Config.BeanBase 
{
    public TbAchievement(JSONNode _json) 
    {
        { if(!_json["ID"].IsNumber) { throw new SerializationException(); }  ID = _json["ID"]; }
        { if(!_json["Name"].IsString) { throw new SerializationException(); }  Name = _json["Name"]; }
        { if(!_json["Order"].IsNumber) { throw new SerializationException(); }  Order = _json["Order"]; }
        { if(!_json["IconPath"].IsString) { throw new SerializationException(); }  IconPath = _json["IconPath"]; }
        { if(!_json["Condition"].IsNumber) { throw new SerializationException(); }  Condition = (Achieventment.Condition)_json["Condition"].AsInt; }
        { var __json0 = _json["ConditionTarget"]; if(!__json0.IsArray) { throw new SerializationException(); } int _n0 = __json0.Count; ConditionTarget = new int[_n0]; int __index0=0; foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  ConditionTarget[__index0++] = __v0; }   }
        { if(!_json["ConditionValue"].IsNumber) { throw new SerializationException(); }  ConditionValue = _json["ConditionValue"]; }
        { if(!_json["Desc"].IsString) { throw new SerializationException(); }  Desc = _json["Desc"]; }
        { if(!_json["RewardType"].IsNumber) { throw new SerializationException(); }  RewardType = _json["RewardType"]; }
        { var __json0 = _json["Reward"]; if(!__json0.IsArray) { throw new SerializationException(); } int _n0 = __json0.Count; Reward = new RewardData[_n0]; int __index0=0; foreach(JSONNode __e0 in __json0.Children) { RewardData __v0;  { if(!__e0.IsObject) { throw new SerializationException(); }  __v0 = RewardData.DeserializeRewardData(__e0);  }  Reward[__index0++] = __v0; }   }
        { if(!_json["IsPercent"].IsBoolean) { throw new SerializationException(); }  IsPercent = _json["IsPercent"]; }
        { if(!_json["IncludeText"].IsBoolean) { throw new SerializationException(); }  IncludeText = _json["IncludeText"]; }
        { if(!_json["TextContent"].IsString) { throw new SerializationException(); }  TextContent = _json["TextContent"]; }
        PostInit();
    }

    public TbAchievement(int ID, string Name, int Order, string IconPath, Achieventment.Condition Condition, int[] ConditionTarget, int ConditionValue, string Desc, int RewardType, RewardData[] Reward, bool IsPercent, bool IncludeText, string TextContent ) 
    {
        this.ID = ID;
        this.Name = Name;
        this.Order = Order;
        this.IconPath = IconPath;
        this.Condition = Condition;
        this.ConditionTarget = ConditionTarget;
        this.ConditionValue = ConditionValue;
        this.Desc = Desc;
        this.RewardType = RewardType;
        this.Reward = Reward;
        this.IsPercent = IsPercent;
        this.IncludeText = IncludeText;
        this.TextContent = TextContent;
        PostInit();
    }

    public static TbAchievement DeserializeTbAchievement(JSONNode _json)
    {
        return new TbAchievement(_json);
    }

    /// <summary>
    /// ID
    /// </summary>
    public int ID { get; private set; }
    /// <summary>
    /// 成就名称
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 排序
    /// </summary>
    public int Order { get; private set; }
    /// <summary>
    /// 图标地址
    /// </summary>
    public string IconPath { get; private set; }
    /// <summary>
    /// 条件类型
    /// </summary>
    public Achieventment.Condition Condition { get; private set; }
    /// <summary>
    /// 条件指定目标
    /// </summary>
    public int[] ConditionTarget { get; private set; }
    /// <summary>
    /// 条件达成值
    /// </summary>
    public int ConditionValue { get; private set; }
    /// <summary>
    /// 简述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 奖励类型
    /// </summary>
    public int RewardType { get; private set; }
    /// <summary>
    /// 奖励
    /// </summary>
    public RewardData[] Reward { get; private set; }
    /// <summary>
    /// 是否为系数
    /// </summary>
    public bool IsPercent { get; private set; }
    /// <summary>
    /// 是否包含文本
    /// </summary>
    public bool IncludeText { get; private set; }
    /// <summary>
    /// 文本内容
    /// </summary>
    public string TextContent { get; private set; }

    public const int __ID__ = 9676737;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        foreach(var _e in Reward) { _e?.Resolve(_tables); }
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
        foreach(var _e in Reward) { _e?.TranslateText(translator); }
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "Name:" + Name + ","
        + "Order:" + Order + ","
        + "IconPath:" + IconPath + ","
        + "Condition:" + Condition + ","
        + "ConditionTarget:" + Bright.Common.StringUtil.CollectionToString(ConditionTarget) + ","
        + "ConditionValue:" + ConditionValue + ","
        + "Desc:" + Desc + ","
        + "RewardType:" + RewardType + ","
        + "Reward:" + Bright.Common.StringUtil.CollectionToString(Reward) + ","
        + "IsPercent:" + IsPercent + ","
        + "IncludeText:" + IncludeText + ","
        + "TextContent:" + TextContent + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
