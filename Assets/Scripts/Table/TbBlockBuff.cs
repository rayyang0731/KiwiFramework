//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg
{ 

public sealed partial class TbBlockBuff :  Bright.Config.BeanBase 
{
    public TbBlockBuff(JSONNode _json) 
    {
        { if(!_json["ID"].IsNumber) { throw new SerializationException(); }  ID = _json["ID"]; }
        { if(!_json["Name"].IsString) { throw new SerializationException(); }  Name = _json["Name"]; }
        { if(!_json["SpawnEffect"].IsString) { throw new SerializationException(); }  SpawnEffect = _json["SpawnEffect"]; }
        { if(!_json["AttachEffect"].IsString) { throw new SerializationException(); }  AttachEffect = _json["AttachEffect"]; }
        { if(!_json["EndEffect"].IsString) { throw new SerializationException(); }  EndEffect = _json["EndEffect"]; }
        { if(!_json["PointerEffect"].IsString) { throw new SerializationException(); }  PointerEffect = _json["PointerEffect"]; }
        { if(!_json["SpawnSound"].IsString) { throw new SerializationException(); }  SpawnSound = _json["SpawnSound"]; }
        { if(!_json["EndSound"].IsString) { throw new SerializationException(); }  EndSound = _json["EndSound"]; }
        { if(!_json["CanClick"].IsBoolean) { throw new SerializationException(); }  CanClick = _json["CanClick"]; }
        { if(!_json["CanClickPermeate"].IsBoolean) { throw new SerializationException(); }  CanClickPermeate = _json["CanClickPermeate"]; }
        { if(!_json["ClickRemoveBuff"].IsBoolean) { throw new SerializationException(); }  ClickRemoveBuff = _json["ClickRemoveBuff"]; }
        { if(!_json["AllowCombine"].IsBoolean) { throw new SerializationException(); }  AllowCombine = _json["AllowCombine"]; }
        { if(!_json["NotAllowMove"].IsBoolean) { throw new SerializationException(); }  NotAllowMove = _json["NotAllowMove"]; }
        { if(!_json["CombineFunction"].IsString) { throw new SerializationException(); }  CombineFunction = _json["CombineFunction"]; }
        { if(!_json["ClickFunction"].IsString) { throw new SerializationException(); }  ClickFunction = _json["ClickFunction"]; }
        { if(!_json["NearCombineFunction"].IsString) { throw new SerializationException(); }  NearCombineFunction = _json["NearCombineFunction"]; }
        { if(!_json["RoundEndFunction"].IsString) { throw new SerializationException(); }  RoundEndFunction = _json["RoundEndFunction"]; }
        PostInit();
    }

    public TbBlockBuff(int ID, string Name, string SpawnEffect, string AttachEffect, string EndEffect, string PointerEffect, string SpawnSound, string EndSound, bool CanClick, bool CanClickPermeate, bool ClickRemoveBuff, bool AllowCombine, bool NotAllowMove, string CombineFunction, string ClickFunction, string NearCombineFunction, string RoundEndFunction ) 
    {
        this.ID = ID;
        this.Name = Name;
        this.SpawnEffect = SpawnEffect;
        this.AttachEffect = AttachEffect;
        this.EndEffect = EndEffect;
        this.PointerEffect = PointerEffect;
        this.SpawnSound = SpawnSound;
        this.EndSound = EndSound;
        this.CanClick = CanClick;
        this.CanClickPermeate = CanClickPermeate;
        this.ClickRemoveBuff = ClickRemoveBuff;
        this.AllowCombine = AllowCombine;
        this.NotAllowMove = NotAllowMove;
        this.CombineFunction = CombineFunction;
        this.ClickFunction = ClickFunction;
        this.NearCombineFunction = NearCombineFunction;
        this.RoundEndFunction = RoundEndFunction;
        PostInit();
    }

    public static TbBlockBuff DeserializeTbBlockBuff(JSONNode _json)
    {
        return new TbBlockBuff(_json);
    }

    /// <summary>
    /// 角色ID
    /// </summary>
    public int ID { get; private set; }
    /// <summary>
    /// 名称
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 生成特效
    /// </summary>
    public string SpawnEffect { get; private set; }
    /// <summary>
    /// 附加特效
    /// </summary>
    public string AttachEffect { get; private set; }
    /// <summary>
    /// 结束特效
    /// </summary>
    public string EndEffect { get; private set; }
    /// <summary>
    /// 指示器特效
    /// </summary>
    public string PointerEffect { get; private set; }
    /// <summary>
    /// 生成音效
    /// </summary>
    public string SpawnSound { get; private set; }
    /// <summary>
    /// 结束音效
    /// </summary>
    public string EndSound { get; private set; }
    /// <summary>
    /// 是否可以点击
    /// </summary>
    public bool CanClick { get; private set; }
    /// <summary>
    /// 是否可以点击渗透
    /// </summary>
    public bool CanClickPermeate { get; private set; }
    /// <summary>
    /// 是否点击移除buff
    /// </summary>
    public bool ClickRemoveBuff { get; private set; }
    /// <summary>
    /// 是否允许凝结
    /// </summary>
    public bool AllowCombine { get; private set; }
    /// <summary>
    /// 是不是不允许移动
    /// </summary>
    public bool NotAllowMove { get; private set; }
    /// <summary>
    /// 凝结效果
    /// </summary>
    public string CombineFunction { get; private set; }
    /// <summary>
    /// 点击效果
    /// </summary>
    public string ClickFunction { get; private set; }
    /// <summary>
    /// 相邻凝结效果
    /// </summary>
    public string NearCombineFunction { get; private set; }
    /// <summary>
    /// 回合结束效果
    /// </summary>
    public string RoundEndFunction { get; private set; }

    public const int __ID__ = 177377170;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "Name:" + Name + ","
        + "SpawnEffect:" + SpawnEffect + ","
        + "AttachEffect:" + AttachEffect + ","
        + "EndEffect:" + EndEffect + ","
        + "PointerEffect:" + PointerEffect + ","
        + "SpawnSound:" + SpawnSound + ","
        + "EndSound:" + EndSound + ","
        + "CanClick:" + CanClick + ","
        + "CanClickPermeate:" + CanClickPermeate + ","
        + "ClickRemoveBuff:" + ClickRemoveBuff + ","
        + "AllowCombine:" + AllowCombine + ","
        + "NotAllowMove:" + NotAllowMove + ","
        + "CombineFunction:" + CombineFunction + ","
        + "ClickFunction:" + ClickFunction + ","
        + "NearCombineFunction:" + NearCombineFunction + ","
        + "RoundEndFunction:" + RoundEndFunction + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
