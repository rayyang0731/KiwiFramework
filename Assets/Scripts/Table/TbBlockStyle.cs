//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg
{ 

public sealed partial class TbBlockStyle :  Bright.Config.BeanBase 
{
    public TbBlockStyle(JSONNode _json) 
    {
        { if(!_json["ID"].IsNumber) { throw new SerializationException(); }  ID = _json["ID"]; }
        { if(!_json["Gorup"].IsNumber) { throw new SerializationException(); }  Gorup = _json["Gorup"]; }
        { if(!_json["X"].IsNumber) { throw new SerializationException(); }  X = _json["X"]; }
        { if(!_json["Y"].IsNumber) { throw new SerializationException(); }  Y = _json["Y"]; }
        { if(!_json["BlockID"].IsNumber) { throw new SerializationException(); }  BlockID = _json["BlockID"]; }
        PostInit();
    }

    public TbBlockStyle(int ID, int Gorup, int X, int Y, int BlockID ) 
    {
        this.ID = ID;
        this.Gorup = Gorup;
        this.X = X;
        this.Y = Y;
        this.BlockID = BlockID;
        PostInit();
    }

    public static TbBlockStyle DeserializeTbBlockStyle(JSONNode _json)
    {
        return new TbBlockStyle(_json);
    }

    /// <summary>
    /// 角色ID
    /// </summary>
    public int ID { get; private set; }
    /// <summary>
    /// 组
    /// </summary>
    public int Gorup { get; private set; }
    /// <summary>
    /// x
    /// </summary>
    public int X { get; private set; }
    /// <summary>
    /// y
    /// </summary>
    public int Y { get; private set; }
    /// <summary>
    /// 块ID
    /// </summary>
    public int BlockID { get; private set; }

    public const int __ID__ = 1219413586;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "Gorup:" + Gorup + ","
        + "X:" + X + ","
        + "Y:" + Y + ","
        + "BlockID:" + BlockID + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
