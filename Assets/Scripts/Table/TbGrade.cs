//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg
{ 

public sealed partial class TbGrade :  Bright.Config.BeanBase 
{
    public TbGrade(JSONNode _json) 
    {
        { if(!_json["ID"].IsNumber) { throw new SerializationException(); }  ID = _json["ID"]; }
        { if(!_json["Life"].IsNumber) { throw new SerializationException(); }  Life = _json["Life"]; }
        { if(!_json["Combo"].IsNumber) { throw new SerializationException(); }  Combo = _json["Combo"]; }
        { if(!_json["HighBlockCount"].IsNumber) { throw new SerializationException(); }  HighBlockCount = _json["HighBlockCount"]; }
        { if(!_json["Round"].IsNumber) { throw new SerializationException(); }  Round = _json["Round"]; }
        { if(!_json["Time"].IsNumber) { throw new SerializationException(); }  Time = _json["Time"]; }
        { if(!_json["MatchMaxCount"].IsNumber) { throw new SerializationException(); }  MatchMaxCount = _json["MatchMaxCount"]; }
        PostInit();
    }

    public TbGrade(int ID, int Life, int Combo, int HighBlockCount, int Round, int Time, int MatchMaxCount ) 
    {
        this.ID = ID;
        this.Life = Life;
        this.Combo = Combo;
        this.HighBlockCount = HighBlockCount;
        this.Round = Round;
        this.Time = Time;
        this.MatchMaxCount = MatchMaxCount;
        PostInit();
    }

    public static TbGrade DeserializeTbGrade(JSONNode _json)
    {
        return new TbGrade(_json);
    }

    /// <summary>
    /// ID
    /// </summary>
    public int ID { get; private set; }
    /// <summary>
    /// 剩余生命
    /// </summary>
    public int Life { get; private set; }
    /// <summary>
    /// 单次连击次数
    /// </summary>
    public int Combo { get; private set; }
    /// <summary>
    /// 触发5级块次数
    /// </summary>
    public int HighBlockCount { get; private set; }
    /// <summary>
    /// 操作回合数
    /// </summary>
    public int Round { get; private set; }
    /// <summary>
    /// 计时
    /// </summary>
    public int Time { get; private set; }
    /// <summary>
    /// 单次凝结最大数
    /// </summary>
    public int MatchMaxCount { get; private set; }

    public const int __ID__ = 115617257;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "Life:" + Life + ","
        + "Combo:" + Combo + ","
        + "HighBlockCount:" + HighBlockCount + ","
        + "Round:" + Round + ","
        + "Time:" + Time + ","
        + "MatchMaxCount:" + MatchMaxCount + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
