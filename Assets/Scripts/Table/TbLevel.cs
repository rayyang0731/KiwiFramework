//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Bright.Serialization;
using System.Collections.Generic;
using SimpleJSON;



namespace cfg
{ 

public sealed partial class TbLevel :  Bright.Config.BeanBase 
{
    public TbLevel(JSONNode _json) 
    {
        { if(!_json["ID"].IsNumber) { throw new SerializationException(); }  ID = _json["ID"]; }
        { if(!_json["Name"].IsString) { throw new SerializationException(); }  Name = _json["Name"]; }
        { if(!_json["Desc"].IsString) { throw new SerializationException(); }  Desc = _json["Desc"]; }
        { if(!_json["SceneID"].IsNumber) { throw new SerializationException(); }  SceneID = _json["SceneID"]; }
        { if(!_json["LevelIcon"].IsNumber) { throw new SerializationException(); }  LevelIcon = _json["LevelIcon"]; }
        { var __json0 = _json["UnlockLevelID"]; if(!__json0.IsArray) { throw new SerializationException(); } int _n0 = __json0.Count; UnlockLevelID = new int[_n0]; int __index0=0; foreach(JSONNode __e0 in __json0.Children) { int __v0;  { if(!__e0.IsNumber) { throw new SerializationException(); }  __v0 = __e0; }  UnlockLevelID[__index0++] = __v0; }   }
        { if(!_json["MonsterRoundGroupID"].IsString) { throw new SerializationException(); }  MonsterRoundGroupID = _json["MonsterRoundGroupID"]; }
        { if(!_json["MatchStoreID"].IsNumber) { throw new SerializationException(); }  MatchStoreID = _json["MatchStoreID"]; }
        { if(!_json["MatchPrefabID"].IsNumber) { throw new SerializationException(); }  MatchPrefabID = _json["MatchPrefabID"]; }
        { if(!_json["DropStoreID"].IsNumber) { throw new SerializationException(); }  DropStoreID = _json["DropStoreID"]; }
        { if(!_json["FirstReward"].IsString) { throw new SerializationException(); }  FirstReward = _json["FirstReward"]; }
        { if(!_json["GradeGroupID"].IsNumber) { throw new SerializationException(); }  GradeGroupID = _json["GradeGroupID"]; }
        { if(!_json["BattleTime"].IsNumber) { throw new SerializationException(); }  BattleTime = _json["BattleTime"]; }
        { if(!_json["DamageFactor"].IsNumber) { throw new SerializationException(); }  DamageFactor = _json["DamageFactor"]; }
        { if(!_json["HPFactor"].IsNumber) { throw new SerializationException(); }  HPFactor = _json["HPFactor"]; }
        { if(!_json["EXP"].IsNumber) { throw new SerializationException(); }  EXP = _json["EXP"]; }
        { if(!_json["BeginDialog"].IsString) { throw new SerializationException(); }  BeginDialog = _json["BeginDialog"]; }
        { if(!_json["EndDialog"].IsString) { throw new SerializationException(); }  EndDialog = _json["EndDialog"]; }
        { if(!_json["BGMPath"].IsString) { throw new SerializationException(); }  BGMPath = _json["BGMPath"]; }
        { if(!_json["BlockStartAnimation"].IsNumber) { throw new SerializationException(); }  BlockStartAnimation = _json["BlockStartAnimation"]; }
        { if(!_json["BlockGenStyle"].IsNumber) { throw new SerializationException(); }  BlockGenStyle = _json["BlockGenStyle"]; }
        { if(!_json["BlockOperationStep"].IsNumber) { throw new SerializationException(); }  BlockOperationStep = _json["BlockOperationStep"]; }
        PostInit();
    }

    public TbLevel(int ID, string Name, string Desc, int SceneID, int LevelIcon, int[] UnlockLevelID, string MonsterRoundGroupID, int MatchStoreID, int MatchPrefabID, int DropStoreID, string FirstReward, int GradeGroupID, int BattleTime, float DamageFactor, float HPFactor, int EXP, string BeginDialog, string EndDialog, string BGMPath, int BlockStartAnimation, int BlockGenStyle, int BlockOperationStep ) 
    {
        this.ID = ID;
        this.Name = Name;
        this.Desc = Desc;
        this.SceneID = SceneID;
        this.LevelIcon = LevelIcon;
        this.UnlockLevelID = UnlockLevelID;
        this.MonsterRoundGroupID = MonsterRoundGroupID;
        this.MatchStoreID = MatchStoreID;
        this.MatchPrefabID = MatchPrefabID;
        this.DropStoreID = DropStoreID;
        this.FirstReward = FirstReward;
        this.GradeGroupID = GradeGroupID;
        this.BattleTime = BattleTime;
        this.DamageFactor = DamageFactor;
        this.HPFactor = HPFactor;
        this.EXP = EXP;
        this.BeginDialog = BeginDialog;
        this.EndDialog = EndDialog;
        this.BGMPath = BGMPath;
        this.BlockStartAnimation = BlockStartAnimation;
        this.BlockGenStyle = BlockGenStyle;
        this.BlockOperationStep = BlockOperationStep;
        PostInit();
    }

    public static TbLevel DeserializeTbLevel(JSONNode _json)
    {
        return new TbLevel(_json);
    }

    /// <summary>
    /// 关卡ID
    /// </summary>
    public int ID { get; private set; }
    /// <summary>
    /// 关卡名称
    /// </summary>
    public string Name { get; private set; }
    /// <summary>
    /// 关卡描述
    /// </summary>
    public string Desc { get; private set; }
    /// <summary>
    /// 场景资源ID
    /// </summary>
    public int SceneID { get; private set; }
    /// <summary>
    /// 关卡图标名称
    /// </summary>
    public int LevelIcon { get; private set; }
    /// <summary>
    /// 解锁关卡ID
    /// </summary>
    public int[] UnlockLevelID { get; private set; }
    /// <summary>
    /// 怪物波次组ID
    /// </summary>
    public string MonsterRoundGroupID { get; private set; }
    /// <summary>
    /// 消除仓库ID
    /// </summary>
    public int MatchStoreID { get; private set; }
    /// <summary>
    /// 消除预设id
    /// </summary>
    public int MatchPrefabID { get; private set; }
    /// <summary>
    /// 掉落组ID
    /// </summary>
    public int DropStoreID { get; private set; }
    /// <summary>
    /// 首次奖励
    /// </summary>
    public string FirstReward { get; private set; }
    /// <summary>
    /// 评级组ID
    /// </summary>
    public int GradeGroupID { get; private set; }
    /// <summary>
    /// 总时长
    /// </summary>
    public int BattleTime { get; private set; }
    /// <summary>
    /// 攻击强度调整
    /// </summary>
    public float DamageFactor { get; private set; }
    /// <summary>
    /// 血量强度调整
    /// </summary>
    public float HPFactor { get; private set; }
    /// <summary>
    /// 关卡经验
    /// </summary>
    public int EXP { get; private set; }
    /// <summary>
    /// 关卡前对话
    /// </summary>
    public string BeginDialog { get; private set; }
    /// <summary>
    /// 关卡结束对话
    /// </summary>
    public string EndDialog { get; private set; }
    /// <summary>
    /// 背景音乐地址
    /// </summary>
    public string BGMPath { get; private set; }
    /// <summary>
    /// 操作块区开始动画库
    /// </summary>
    public int BlockStartAnimation { get; private set; }
    /// <summary>
    /// 生成样式库
    /// </summary>
    public int BlockGenStyle { get; private set; }
    /// <summary>
    /// 初始强制操作步骤ID
    /// </summary>
    public int BlockOperationStep { get; private set; }

    public const int __ID__ = 119867798;
    public override int GetTypeId() => __ID__;

    public  void Resolve(Dictionary<string, object> _tables)
    {
        PostResolve();
    }

    public  void TranslateText(System.Func<string, string, string> translator)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "ID:" + ID + ","
        + "Name:" + Name + ","
        + "Desc:" + Desc + ","
        + "SceneID:" + SceneID + ","
        + "LevelIcon:" + LevelIcon + ","
        + "UnlockLevelID:" + Bright.Common.StringUtil.CollectionToString(UnlockLevelID) + ","
        + "MonsterRoundGroupID:" + MonsterRoundGroupID + ","
        + "MatchStoreID:" + MatchStoreID + ","
        + "MatchPrefabID:" + MatchPrefabID + ","
        + "DropStoreID:" + DropStoreID + ","
        + "FirstReward:" + FirstReward + ","
        + "GradeGroupID:" + GradeGroupID + ","
        + "BattleTime:" + BattleTime + ","
        + "DamageFactor:" + DamageFactor + ","
        + "HPFactor:" + HPFactor + ","
        + "EXP:" + EXP + ","
        + "BeginDialog:" + BeginDialog + ","
        + "EndDialog:" + EndDialog + ","
        + "BGMPath:" + BGMPath + ","
        + "BlockStartAnimation:" + BlockStartAnimation + ","
        + "BlockGenStyle:" + BlockGenStyle + ","
        + "BlockOperationStep:" + BlockOperationStep + ","
        + "}";
    }
    
    partial void PostInit();
    partial void PostResolve();
}
}
